// Copyright 2017 Istio Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// THIS FILE IS AUTOMATICALLY GENERATED BY MIXGEN.

syntax = "proto3";


// The `analytics` template represents a single request reported to Apigee's analytics processing system.
// Complete Apigee documentation on the concepts and usage of this adapter is also available on the
// [Apigee Adapter for Istio](https://docs.apigee.com/api-platform/istio-adapter/concepts) site.
// For more information and product support, please [contact Apigee support](https://apigee.com/about/support/portal).
// 
// Example config:
// 
// ```yaml
// apiVersion: config.istio.io/v1alpha2
// kind: analytics
// metadata:
//   name: apigee
//   namespace: istio-system
// spec:
//   api_key: request.api_key | request.headers["x-api-key"] | ""
//   api_proxy: api.service | destination.service | ""
//   response_status_code: response.code | 0
//   client_ip: source.ip | ip("0.0.0.0")
//   request_verb: request.method | ""
//   request_uri: request.path | ""
//   request_path: request.path | ""
//   useragent: request.useragent | ""
//   client_received_start_timestamp: request.time
//   client_received_end_timestamp: request.time
//   target_sent_start_timestamp: request.time
//   target_sent_end_timestamp: request.time
//   target_received_start_timestamp: response.time
//   target_received_end_timestamp: response.time
//   client_sent_start_timestamp: response.time
//   client_sent_end_timestamp: response.time
//   api_claims: # from jwt
//     json_claims: request.auth.raw_claims | ""
// ```
//
// This Template provides Istio telemetry data to the Apigee Analytics engine.
// For additional information on this adapter or support please contact anchor-prega-support@google.com.
package analytics;


import "gogoproto/gogo.proto";
import "mixer/adapter/model/v1beta1/extensions.proto";
import "google/protobuf/any.proto";
import "mixer/adapter/model/v1beta1/report.proto";
import "policy/v1beta1/type.proto";

option (istio.mixer.adapter.model.v1beta1.template_variety) = TEMPLATE_VARIETY_REPORT;
option (istio.mixer.adapter.model.v1beta1.template_name) = "analytics";

option (gogoproto.goproto_getters_all) = false;
option (gogoproto.equal_all) = false;
option (gogoproto.gostring_all) = false;
option (gogoproto.stable_marshaler_all) = true;

// HandleAnalyticsService is implemented by backends that wants to handle request-time 'analytics' instances.
service HandleAnalyticsService {
    // HandleAnalytics is called by Mixer at request-time to deliver 'analytics' instances to the backend.
    rpc HandleAnalytics(HandleAnalyticsRequest) returns (istio.mixer.adapter.model.v1beta1.ReportResult);
    
}

// Request message for HandleAnalytics method.
message HandleAnalyticsRequest {

    // 'analytics' instances.
    repeated InstanceMsg instances = 1;

    // Adapter specific handler configuration.
    //
    // Note: Backends can also implement [InfrastructureBackend][https://istio.io/docs/reference/config/mixer/istio.mixer.adapter.model.v1beta1.html#InfrastructureBackend]
    // service and therefore opt to receive handler configuration during session creation through [InfrastructureBackend.CreateSession][TODO: Link to this fragment]
    // call. In that case, adapter_config will have type_url as 'google.protobuf.Any.type_url' and would contain string
    // value of session_id (returned from InfrastructureBackend.CreateSession).
    google.protobuf.Any adapter_config = 2;

    // Id to dedupe identical requests from Mixer.
    string dedup_id = 3;
}





// Contains instance payload for 'analytics' template. This is passed to infrastructure backends during request-time
// through HandleAnalyticsService.HandleAnalytics.
message InstanceMsg {

    // Name of the instance as specified in configuration.
    string name = 72295727;
    
    // The name of the proxy (usually the Istio API or service name).
    string api_proxy = 1;
    
    // HTTP response code
    int64 response_status_code = 2;
    
    // Client IP address
    istio.policy.v1beta1.IPAddress client_ip = 3;
    
    // HTTP request verb
    string request_verb = 4;
    
    // HTTP request URI
    string request_uri = 5;
    
    // HTTP request path
    string request_path = 6;
    
    // HTTP user agent header
    string useragent = 7;
    
    // Timestamp of when the api_proxy started receiving the request.
    istio.policy.v1beta1.TimeStamp client_received_start_timestamp = 8;
    
    // Timestamp of when the api_proxy  finished receiving the request.
    istio.policy.v1beta1.TimeStamp client_received_end_timestamp = 9;
    
    // Timestamp of when the api_proxy started sending the request to the target.
    istio.policy.v1beta1.TimeStamp client_sent_start_timestamp = 10;
    
    // Timestamp of when the api_proxy finished sending the request to the target.
    istio.policy.v1beta1.TimeStamp client_sent_end_timestamp = 11;
    
    // Timestamp of when the api_proxy started request to target.
    istio.policy.v1beta1.TimeStamp target_sent_start_timestamp = 12;
    
    // Timestamp of when the api_proxy finished sending request to target.
    istio.policy.v1beta1.TimeStamp target_sent_end_timestamp = 13;
    
    // Timestamp of when the api_proxy started receiving response from target.
    istio.policy.v1beta1.TimeStamp target_received_start_timestamp = 14;
    
    // Timestamp of when the api_proxy finished receiving response from target.
    istio.policy.v1beta1.TimeStamp target_received_end_timestamp = 15;
    
    // The JWT claims that were used for authenticating the request (if any)
// Use subkey "json_claims" for passing all claims in as a single JSON field.
    map<string, string> api_claims = 200;
    
    // The API KEY that was used for authenticating the request (if any)
    string api_key = 201;
    
}

// Contains inferred type information about specific instance of 'analytics' template. This is passed to
// infrastructure backends during configuration-time through [InfrastructureBackend.CreateSession][TODO: Link to this fragment].
message Type {
    
}


// Represents instance configuration schema for 'analytics' template.
message InstanceParam {
    
    // The name of the proxy (usually the Istio API or service name).
    string api_proxy = 1;
    
    // HTTP response code
    string response_status_code = 2;
    
    // Client IP address
    string client_ip = 3;
    
    // HTTP request verb
    string request_verb = 4;
    
    // HTTP request URI
    string request_uri = 5;
    
    // HTTP request path
    string request_path = 6;
    
    // HTTP user agent header
    string useragent = 7;
    
    // Timestamp of when the api_proxy started receiving the request.
    string client_received_start_timestamp = 8;
    
    // Timestamp of when the api_proxy  finished receiving the request.
    string client_received_end_timestamp = 9;
    
    // Timestamp of when the api_proxy started sending the request to the target.
    string client_sent_start_timestamp = 10;
    
    // Timestamp of when the api_proxy finished sending the request to the target.
    string client_sent_end_timestamp = 11;
    
    // Timestamp of when the api_proxy started request to target.
    string target_sent_start_timestamp = 12;
    
    // Timestamp of when the api_proxy finished sending request to target.
    string target_sent_end_timestamp = 13;
    
    // Timestamp of when the api_proxy started receiving response from target.
    string target_received_start_timestamp = 14;
    
    // Timestamp of when the api_proxy finished receiving response from target.
    string target_received_end_timestamp = 15;
    
    // The JWT claims that were used for authenticating the request (if any)
// Use subkey "json_claims" for passing all claims in as a single JSON field.
    map<string, string> api_claims = 200;
    
    // The API KEY that was used for authenticating the request (if any)
    string api_key = 201;
    
}

