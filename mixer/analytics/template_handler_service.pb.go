// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mixer/analytics/template_handler_service.proto

// The `analytics` template represents a single request reported to Apigee's analytics processing system.
// Complete Apigee documentation on the concepts and usage of this adapter is also available on the
// [Apigee Adapter for Istio](https://docs.apigee.com/api-platform/istio-adapter/concepts) site.
// For more information and product support, please [contact Apigee support](https://apigee.com/about/support/portal).
//
// Example config:
//
// ```yaml
// apiVersion: config.istio.io/v1alpha2
// kind: analytics
// metadata:
//   name: apigee
//   namespace: istio-system
// spec:
//   api_key: request.api_key | request.headers["x-api-key"] | ""
//   api_proxy: api.service | destination.service | ""
//   response_status_code: response.code | 0
//   client_ip: source.ip | ip("0.0.0.0")
//   request_verb: request.method | ""
//   request_uri: request.path | ""
//   request_path: request.path | ""
//   useragent: request.useragent | ""
//   client_received_start_timestamp: request.time
//   client_received_end_timestamp: request.time
//   target_sent_start_timestamp: request.time
//   target_sent_end_timestamp: request.time
//   target_received_start_timestamp: response.time
//   target_received_end_timestamp: response.time
//   client_sent_start_timestamp: response.time
//   client_sent_end_timestamp: response.time
//   api_claims: # from jwt
//     json_claims: request.auth.raw_claims | ""
// ```
//
// This Template provides Istio telemetry data to the Apigee Analytics engine.
// For additional information on this adapter or support please contact anchor-prega-support@google.com.

package analytics

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	io "io"
	v1beta11 "istio.io/api/mixer/adapter/model/v1beta1"
	v1beta1 "istio.io/api/policy/v1beta1"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Request message for HandleAnalytics method.
type HandleAnalyticsRequest struct {
	// 'analytics' instances.
	Instances []*InstanceMsg `protobuf:"bytes,1,rep,name=instances,proto3" json:"instances,omitempty"`
	// Adapter specific handler configuration.
	//
	// Note: Backends can also implement [InfrastructureBackend][https://istio.io/docs/reference/config/mixer/istio.mixer.adapter.model.v1beta1.html#InfrastructureBackend]
	// service and therefore opt to receive handler configuration during session creation through [InfrastructureBackend.CreateSession][TODO: Link to this fragment]
	// call. In that case, adapter_config will have type_url as 'google.protobuf.Any.type_url' and would contain string
	// value of session_id (returned from InfrastructureBackend.CreateSession).
	AdapterConfig *types.Any `protobuf:"bytes,2,opt,name=adapter_config,json=adapterConfig,proto3" json:"adapter_config,omitempty"`
	// Id to dedupe identical requests from Mixer.
	DedupId string `protobuf:"bytes,3,opt,name=dedup_id,json=dedupId,proto3" json:"dedup_id,omitempty"`
}

func (m *HandleAnalyticsRequest) Reset()      { *m = HandleAnalyticsRequest{} }
func (*HandleAnalyticsRequest) ProtoMessage() {}
func (*HandleAnalyticsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_368f76ae8d934e47, []int{0}
}
func (m *HandleAnalyticsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HandleAnalyticsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HandleAnalyticsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HandleAnalyticsRequest.Merge(m, src)
}
func (m *HandleAnalyticsRequest) XXX_Size() int {
	return m.Size()
}
func (m *HandleAnalyticsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HandleAnalyticsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HandleAnalyticsRequest proto.InternalMessageInfo

// Contains instance payload for 'analytics' template. This is passed to infrastructure backends during request-time
// through HandleAnalyticsService.HandleAnalytics.
type InstanceMsg struct {
	// Name of the instance as specified in configuration.
	Name string `protobuf:"bytes,72295727,opt,name=name,proto3" json:"name,omitempty"`
	// The name of the proxy (usually the Istio API or service name).
	ApiProxy string `protobuf:"bytes,1,opt,name=api_proxy,json=apiProxy,proto3" json:"api_proxy,omitempty"`
	// HTTP response code
	ResponseStatusCode int64 `protobuf:"varint,2,opt,name=response_status_code,json=responseStatusCode,proto3" json:"response_status_code,omitempty"`
	// Client IP address
	ClientIp *v1beta1.IPAddress `protobuf:"bytes,3,opt,name=client_ip,json=clientIp,proto3" json:"client_ip,omitempty"`
	// HTTP request verb
	RequestVerb string `protobuf:"bytes,4,opt,name=request_verb,json=requestVerb,proto3" json:"request_verb,omitempty"`
	// HTTP request URI
	RequestUri string `protobuf:"bytes,5,opt,name=request_uri,json=requestUri,proto3" json:"request_uri,omitempty"`
	// HTTP request path
	RequestPath string `protobuf:"bytes,6,opt,name=request_path,json=requestPath,proto3" json:"request_path,omitempty"`
	// HTTP user agent header
	Useragent string `protobuf:"bytes,7,opt,name=useragent,proto3" json:"useragent,omitempty"`
	// Timestamp of when the api_proxy started receiving the request.
	ClientReceivedStartTimestamp *v1beta1.TimeStamp `protobuf:"bytes,8,opt,name=client_received_start_timestamp,json=clientReceivedStartTimestamp,proto3" json:"client_received_start_timestamp,omitempty"`
	// Timestamp of when the api_proxy  finished receiving the request.
	ClientReceivedEndTimestamp *v1beta1.TimeStamp `protobuf:"bytes,9,opt,name=client_received_end_timestamp,json=clientReceivedEndTimestamp,proto3" json:"client_received_end_timestamp,omitempty"`
	// Timestamp of when the api_proxy started sending the request to the target.
	ClientSentStartTimestamp *v1beta1.TimeStamp `protobuf:"bytes,10,opt,name=client_sent_start_timestamp,json=clientSentStartTimestamp,proto3" json:"client_sent_start_timestamp,omitempty"`
	// Timestamp of when the api_proxy finished sending the request to the target.
	ClientSentEndTimestamp *v1beta1.TimeStamp `protobuf:"bytes,11,opt,name=client_sent_end_timestamp,json=clientSentEndTimestamp,proto3" json:"client_sent_end_timestamp,omitempty"`
	// Timestamp of when the api_proxy started request to target.
	TargetSentStartTimestamp *v1beta1.TimeStamp `protobuf:"bytes,12,opt,name=target_sent_start_timestamp,json=targetSentStartTimestamp,proto3" json:"target_sent_start_timestamp,omitempty"`
	// Timestamp of when the api_proxy finished sending request to target.
	TargetSentEndTimestamp *v1beta1.TimeStamp `protobuf:"bytes,13,opt,name=target_sent_end_timestamp,json=targetSentEndTimestamp,proto3" json:"target_sent_end_timestamp,omitempty"`
	// Timestamp of when the api_proxy started receiving response from target.
	TargetReceivedStartTimestamp *v1beta1.TimeStamp `protobuf:"bytes,14,opt,name=target_received_start_timestamp,json=targetReceivedStartTimestamp,proto3" json:"target_received_start_timestamp,omitempty"`
	// Timestamp of when the api_proxy finished receiving response from target.
	TargetReceivedEndTimestamp *v1beta1.TimeStamp `protobuf:"bytes,15,opt,name=target_received_end_timestamp,json=targetReceivedEndTimestamp,proto3" json:"target_received_end_timestamp,omitempty"`
	// The JWT claims that were used for authenticating the request (if any)
	// Use subkey "json_claims" for passing all claims in as a single JSON field.
	ApiClaims map[string]string `protobuf:"bytes,200,rep,name=api_claims,json=apiClaims,proto3" json:"api_claims,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The API KEY that was used for authenticating the request (if any)
	ApiKey string `protobuf:"bytes,201,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (m *InstanceMsg) Reset()      { *m = InstanceMsg{} }
func (*InstanceMsg) ProtoMessage() {}
func (*InstanceMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_368f76ae8d934e47, []int{1}
}
func (m *InstanceMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstanceMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *InstanceMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceMsg.Merge(m, src)
}
func (m *InstanceMsg) XXX_Size() int {
	return m.Size()
}
func (m *InstanceMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceMsg.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceMsg proto.InternalMessageInfo

// Contains inferred type information about specific instance of 'analytics' template. This is passed to
// infrastructure backends during configuration-time through [InfrastructureBackend.CreateSession][TODO: Link to this fragment].
type Type struct {
}

func (m *Type) Reset()      { *m = Type{} }
func (*Type) ProtoMessage() {}
func (*Type) Descriptor() ([]byte, []int) {
	return fileDescriptor_368f76ae8d934e47, []int{2}
}
func (m *Type) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Type) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Type) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Type.Merge(m, src)
}
func (m *Type) XXX_Size() int {
	return m.Size()
}
func (m *Type) XXX_DiscardUnknown() {
	xxx_messageInfo_Type.DiscardUnknown(m)
}

var xxx_messageInfo_Type proto.InternalMessageInfo

// Represents instance configuration schema for 'analytics' template.
type InstanceParam struct {
	// The name of the proxy (usually the Istio API or service name).
	ApiProxy string `protobuf:"bytes,1,opt,name=api_proxy,json=apiProxy,proto3" json:"api_proxy,omitempty"`
	// HTTP response code
	ResponseStatusCode string `protobuf:"bytes,2,opt,name=response_status_code,json=responseStatusCode,proto3" json:"response_status_code,omitempty"`
	// Client IP address
	ClientIp string `protobuf:"bytes,3,opt,name=client_ip,json=clientIp,proto3" json:"client_ip,omitempty"`
	// HTTP request verb
	RequestVerb string `protobuf:"bytes,4,opt,name=request_verb,json=requestVerb,proto3" json:"request_verb,omitempty"`
	// HTTP request URI
	RequestUri string `protobuf:"bytes,5,opt,name=request_uri,json=requestUri,proto3" json:"request_uri,omitempty"`
	// HTTP request path
	RequestPath string `protobuf:"bytes,6,opt,name=request_path,json=requestPath,proto3" json:"request_path,omitempty"`
	// HTTP user agent header
	Useragent string `protobuf:"bytes,7,opt,name=useragent,proto3" json:"useragent,omitempty"`
	// Timestamp of when the api_proxy started receiving the request.
	ClientReceivedStartTimestamp string `protobuf:"bytes,8,opt,name=client_received_start_timestamp,json=clientReceivedStartTimestamp,proto3" json:"client_received_start_timestamp,omitempty"`
	// Timestamp of when the api_proxy  finished receiving the request.
	ClientReceivedEndTimestamp string `protobuf:"bytes,9,opt,name=client_received_end_timestamp,json=clientReceivedEndTimestamp,proto3" json:"client_received_end_timestamp,omitempty"`
	// Timestamp of when the api_proxy started sending the request to the target.
	ClientSentStartTimestamp string `protobuf:"bytes,10,opt,name=client_sent_start_timestamp,json=clientSentStartTimestamp,proto3" json:"client_sent_start_timestamp,omitempty"`
	// Timestamp of when the api_proxy finished sending the request to the target.
	ClientSentEndTimestamp string `protobuf:"bytes,11,opt,name=client_sent_end_timestamp,json=clientSentEndTimestamp,proto3" json:"client_sent_end_timestamp,omitempty"`
	// Timestamp of when the api_proxy started request to target.
	TargetSentStartTimestamp string `protobuf:"bytes,12,opt,name=target_sent_start_timestamp,json=targetSentStartTimestamp,proto3" json:"target_sent_start_timestamp,omitempty"`
	// Timestamp of when the api_proxy finished sending request to target.
	TargetSentEndTimestamp string `protobuf:"bytes,13,opt,name=target_sent_end_timestamp,json=targetSentEndTimestamp,proto3" json:"target_sent_end_timestamp,omitempty"`
	// Timestamp of when the api_proxy started receiving response from target.
	TargetReceivedStartTimestamp string `protobuf:"bytes,14,opt,name=target_received_start_timestamp,json=targetReceivedStartTimestamp,proto3" json:"target_received_start_timestamp,omitempty"`
	// Timestamp of when the api_proxy finished receiving response from target.
	TargetReceivedEndTimestamp string `protobuf:"bytes,15,opt,name=target_received_end_timestamp,json=targetReceivedEndTimestamp,proto3" json:"target_received_end_timestamp,omitempty"`
	// The JWT claims that were used for authenticating the request (if any)
	// Use subkey "json_claims" for passing all claims in as a single JSON field.
	ApiClaims map[string]string `protobuf:"bytes,200,rep,name=api_claims,json=apiClaims,proto3" json:"api_claims,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The API KEY that was used for authenticating the request (if any)
	ApiKey string `protobuf:"bytes,201,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (m *InstanceParam) Reset()      { *m = InstanceParam{} }
func (*InstanceParam) ProtoMessage() {}
func (*InstanceParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_368f76ae8d934e47, []int{3}
}
func (m *InstanceParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstanceParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *InstanceParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceParam.Merge(m, src)
}
func (m *InstanceParam) XXX_Size() int {
	return m.Size()
}
func (m *InstanceParam) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceParam.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceParam proto.InternalMessageInfo

func init() {
	proto.RegisterType((*HandleAnalyticsRequest)(nil), "analytics.HandleAnalyticsRequest")
	proto.RegisterType((*InstanceMsg)(nil), "analytics.InstanceMsg")
	proto.RegisterMapType((map[string]string)(nil), "analytics.InstanceMsg.ApiClaimsEntry")
	proto.RegisterType((*Type)(nil), "analytics.Type")
	proto.RegisterType((*InstanceParam)(nil), "analytics.InstanceParam")
	proto.RegisterMapType((map[string]string)(nil), "analytics.InstanceParam.ApiClaimsEntry")
}

func init() {
	proto.RegisterFile("mixer/analytics/template_handler_service.proto", fileDescriptor_368f76ae8d934e47)
}

var fileDescriptor_368f76ae8d934e47 = []byte{
	// 932 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0xcd, 0x6e, 0x23, 0x45,
	0x10, 0xf6, 0x24, 0xd9, 0x24, 0xdd, 0xde, 0x64, 0x51, 0x2b, 0x44, 0x13, 0x67, 0x99, 0x64, 0x2d,
	0x21, 0x72, 0x40, 0x63, 0x36, 0x70, 0x60, 0x61, 0xf7, 0x60, 0x22, 0x0b, 0x22, 0x84, 0x14, 0x26,
	0x81, 0x03, 0x07, 0x46, 0xed, 0x99, 0x8a, 0xd3, 0x62, 0x7e, 0x9a, 0xee, 0xb6, 0x95, 0x39, 0x81,
	0x78, 0x02, 0xa4, 0x7d, 0x07, 0x04, 0x27, 0x5e, 0x80, 0x07, 0x08, 0x9c, 0x22, 0x4e, 0xb9, 0x20,
	0x11, 0x67, 0x91, 0x38, 0xe6, 0xc8, 0x11, 0x4d, 0xcf, 0x38, 0xf6, 0x18, 0xff, 0x8c, 0x38, 0x20,
	0x0e, 0x89, 0x5c, 0x5d, 0x35, 0x5f, 0x7d, 0x5f, 0xab, 0xeb, 0x53, 0x61, 0x3b, 0x64, 0xe7, 0x20,
	0x1a, 0x34, 0xa2, 0x41, 0xa2, 0x98, 0x27, 0x1b, 0x0a, 0x42, 0x1e, 0x50, 0x05, 0xee, 0x19, 0x8d,
	0xfc, 0x00, 0x84, 0x2b, 0x41, 0xf4, 0x98, 0x07, 0x36, 0x17, 0xb1, 0x8a, 0x09, 0xba, 0xab, 0xac,
	0x6d, 0x74, 0xe2, 0x4e, 0xac, 0x4f, 0x1b, 0xe9, 0xaf, 0xac, 0xa0, 0xf6, 0x7a, 0x0e, 0xe8, 0x53,
	0xae, 0x40, 0x34, 0xc2, 0xd8, 0x87, 0xa0, 0xd1, 0x7b, 0xdc, 0x06, 0x45, 0x1f, 0x37, 0xe0, 0x5c,
	0x41, 0x24, 0x59, 0x1c, 0xc9, 0xbc, 0x7a, 0xab, 0x13, 0xc7, 0x9d, 0x00, 0x1a, 0x3a, 0x6a, 0x77,
	0x4f, 0x1b, 0x34, 0x4a, 0xf2, 0xd4, 0xde, 0x2c, 0x20, 0x01, 0x3c, 0x16, 0x6a, 0x00, 0xc2, 0xe3,
	0x80, 0x79, 0xc9, 0x5d, 0x52, 0x25, 0x3c, 0xa7, 0x5b, 0xff, 0xce, 0xc0, 0x9b, 0x1f, 0x68, 0x21,
	0xcd, 0x01, 0x6f, 0x07, 0xbe, 0xec, 0x82, 0x54, 0xe4, 0x2d, 0x8c, 0x58, 0x24, 0x15, 0x8d, 0x3c,
	0x90, 0xa6, 0xb1, 0xbb, 0xb8, 0x57, 0xdd, 0xdf, 0xb4, 0xef, 0xd4, 0xd9, 0x87, 0x79, 0xee, 0x23,
	0xd9, 0x71, 0x86, 0x85, 0xe4, 0x5d, 0xbc, 0x9e, 0x33, 0x72, 0xbd, 0x38, 0x3a, 0x65, 0x1d, 0x73,
	0x61, 0xd7, 0xd8, 0xab, 0xee, 0x6f, 0xd8, 0x99, 0x12, 0x7b, 0xa0, 0xc4, 0x6e, 0x46, 0x89, 0xb3,
	0x96, 0xd7, 0x1e, 0xe8, 0x52, 0xb2, 0x85, 0x57, 0x7d, 0xf0, 0xbb, 0xdc, 0x65, 0xbe, 0xb9, 0xb8,
	0x6b, 0xec, 0x21, 0x67, 0x45, 0xc7, 0x87, 0x7e, 0xfd, 0x0f, 0x84, 0xab, 0x23, 0x2d, 0xc9, 0xcb,
	0x78, 0x29, 0xa2, 0x21, 0x98, 0x3f, 0xfe, 0xf2, 0x53, 0x5d, 0x57, 0xea, 0x90, 0x6c, 0x63, 0x44,
	0x39, 0x73, 0xb9, 0x88, 0xcf, 0x13, 0xd3, 0xd0, 0x89, 0x55, 0xca, 0xd9, 0x51, 0x1a, 0x93, 0x37,
	0xf0, 0x86, 0x00, 0xc9, 0xe3, 0x48, 0x82, 0x2b, 0x15, 0x55, 0x5d, 0xe9, 0x7a, 0xb1, 0x0f, 0x9a,
	0xe1, 0xa2, 0x43, 0x06, 0xb9, 0x63, 0x9d, 0x3a, 0x88, 0x7d, 0x20, 0x4f, 0x31, 0xf2, 0x02, 0x06,
	0x91, 0x72, 0x19, 0xd7, 0x8c, 0xaa, 0xfb, 0x3b, 0x36, 0x93, 0x8a, 0xc5, 0x76, 0x76, 0xa7, 0x76,
	0x7e, 0xa7, 0xf6, 0xe1, 0x51, 0xd3, 0xf7, 0x05, 0x48, 0xe9, 0xac, 0x66, 0x5f, 0x1c, 0x72, 0xf2,
	0x08, 0xdf, 0x17, 0xd9, 0x65, 0xba, 0x3d, 0x10, 0x6d, 0x73, 0x49, 0xf3, 0xa9, 0xe6, 0x67, 0x9f,
	0x82, 0x68, 0x93, 0x1d, 0x3c, 0x08, 0xdd, 0xae, 0x60, 0xe6, 0x3d, 0x5d, 0x81, 0xf3, 0xa3, 0x4f,
	0x04, 0x1b, 0xc5, 0xe0, 0x54, 0x9d, 0x99, 0xcb, 0x05, 0x8c, 0x23, 0xaa, 0xce, 0xc8, 0x43, 0x8c,
	0xba, 0x12, 0x04, 0xed, 0x40, 0xa4, 0xcc, 0x15, 0x9d, 0x1f, 0x1e, 0x90, 0x53, 0xbc, 0x93, 0x4b,
	0x10, 0xe0, 0x01, 0xeb, 0x81, 0x9f, 0x6a, 0x17, 0xca, 0x55, 0x2c, 0x04, 0xa9, 0x68, 0xc8, 0xcd,
	0xd5, 0x59, 0xc2, 0x4e, 0x58, 0x98, 0xde, 0x48, 0xc8, 0x9d, 0x87, 0x19, 0x8e, 0x93, 0xc3, 0x1c,
	0xa7, 0x28, 0x27, 0x03, 0x10, 0xd2, 0xc6, 0xaf, 0x8c, 0xf7, 0x81, 0xc8, 0x1f, 0xe9, 0x82, 0xca,
	0x75, 0xa9, 0x15, 0xbb, 0xb4, 0x22, 0x7f, 0xd8, 0xe3, 0x73, 0xbc, 0x9d, 0xf7, 0x90, 0xfa, 0xdf,
	0x98, 0x0e, 0x5c, 0xae, 0x83, 0x99, 0x61, 0x1c, 0xa7, 0x7f, 0x45, 0x0d, 0x9f, 0xe1, 0xad, 0x51,
	0xfc, 0x22, 0xff, 0x6a, 0x39, 0xf4, 0xcd, 0x21, 0xfa, 0x38, 0x77, 0x45, 0x45, 0x07, 0xa6, 0x70,
	0xbf, 0x5f, 0x92, 0x7b, 0x86, 0x31, 0x99, 0xfb, 0x28, 0x7e, 0x91, 0xfb, 0x5a, 0x49, 0xee, 0x43,
	0xf4, 0x02, 0xf7, 0x53, 0xbc, 0x93, 0x63, 0x4f, 0x7d, 0x43, 0xeb, 0x25, 0xdf, 0x50, 0x86, 0x33,
	0xfd, 0x0d, 0x8d, 0xf7, 0x29, 0xea, 0x78, 0x50, 0xf2, 0x0d, 0x15, 0xbb, 0x14, 0xb4, 0xb4, 0x30,
	0x4e, 0x1d, 0xc2, 0x0b, 0x28, 0x0b, 0xa5, 0x79, 0x91, 0x19, 0xdb, 0xab, 0x93, 0x8d, 0xcd, 0x6e,
	0x72, 0x76, 0xa0, 0x0b, 0x5b, 0x91, 0x12, 0x89, 0x93, 0x7a, 0x4b, 0x16, 0x13, 0x13, 0xaf, 0xa4,
	0x30, 0x5f, 0x40, 0x62, 0xfe, 0x9c, 0xf9, 0xcc, 0x32, 0xe5, 0xec, 0x43, 0x48, 0x6a, 0x4f, 0xf1,
	0x7a, 0xf1, 0x33, 0xf2, 0x12, 0x5e, 0x4c, 0xeb, 0xb2, 0xb2, 0xf4, 0x27, 0xd9, 0xc0, 0xf7, 0x7a,
	0x34, 0xe8, 0x66, 0xd6, 0x83, 0x9c, 0x2c, 0x78, 0x67, 0xe1, 0x6d, 0xa3, 0xbe, 0x8c, 0x97, 0x4e,
	0x12, 0x0e, 0xf5, 0x1f, 0x56, 0xf0, 0xda, 0x80, 0xc9, 0x11, 0x15, 0x34, 0xfc, 0xf7, 0xd6, 0x86,
	0x26, 0x5a, 0xdb, 0xf6, 0xb8, 0xb5, 0xa1, 0xff, 0x9b, 0x73, 0xb5, 0xca, 0x39, 0x17, 0x9a, 0x63,
	0x4c, 0xcd, 0x32, 0xc6, 0x84, 0x66, 0xfa, 0xce, 0xb3, 0xf9, 0xbe, 0x83, 0x66, 0xd8, 0xca, 0x93,
	0x79, 0xb6, 0x82, 0xa6, 0xba, 0xc6, 0xb3, 0xf9, 0xae, 0x81, 0x66, 0x98, 0xc2, 0x93, 0x79, 0xa6,
	0x80, 0xa6, 0xce, 0x7c, 0xab, 0xdc, 0xcc, 0xa3, 0x39, 0x23, 0xdd, 0x2c, 0x33, 0xd2, 0x68, 0xe6,
	0xc4, 0xbe, 0x3f, 0x69, 0x62, 0x5f, 0x9b, 0x30, 0xb1, 0x7a, 0x4e, 0xfe, 0xfb, 0x99, 0xdd, 0xff,
	0xea, 0x1f, 0x3b, 0xd4, 0x71, 0xb6, 0x13, 0x12, 0xc0, 0x0f, 0xc6, 0x32, 0xe4, 0xd1, 0x08, 0xf1,
	0xc9, 0x9b, 0x57, 0xad, 0x91, 0xfb, 0x9b, 0x5e, 0xf0, 0xec, 0x7c, 0x45, 0xb2, 0xf5, 0x82, 0x77,
	0x67, 0x76, 0x8e, 0x5e, 0xf0, 0x1c, 0x90, 0xdd, 0x40, 0xbd, 0xf7, 0xf1, 0xc5, 0xb5, 0x55, 0xb9,
	0xbc, 0xb6, 0x2a, 0x57, 0xd7, 0x56, 0xe5, 0xf6, 0xda, 0xaa, 0x7c, 0xdd, 0xb7, 0x8c, 0xef, 0xfb,
	0x56, 0xe5, 0xa2, 0x6f, 0x19, 0x97, 0x7d, 0xcb, 0xb8, 0xea, 0x5b, 0xc6, 0xef, 0x7d, 0xcb, 0xf8,
	0xb3, 0x6f, 0x55, 0x6e, 0xfb, 0x96, 0xf1, 0xed, 0x8d, 0x55, 0xb9, 0xbc, 0xb1, 0x2a, 0x57, 0x37,
	0x56, 0xe5, 0xaf, 0x5f, 0x5f, 0x3c, 0x5f, 0x30, 0xbe, 0xf9, 0xed, 0xc5, 0xf3, 0x85, 0xe1, 0xf2,
	0xda, 0x5e, 0xd6, 0x7b, 0xda, 0x9b, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x89, 0x16, 0xe8, 0x42,
	0x00, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HandleAnalyticsServiceClient is the client API for HandleAnalyticsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HandleAnalyticsServiceClient interface {
	// HandleAnalytics is called by Mixer at request-time to deliver 'analytics' instances to the backend.
	HandleAnalytics(ctx context.Context, in *HandleAnalyticsRequest, opts ...grpc.CallOption) (*v1beta11.ReportResult, error)
}

type handleAnalyticsServiceClient struct {
	cc *grpc.ClientConn
}

func NewHandleAnalyticsServiceClient(cc *grpc.ClientConn) HandleAnalyticsServiceClient {
	return &handleAnalyticsServiceClient{cc}
}

func (c *handleAnalyticsServiceClient) HandleAnalytics(ctx context.Context, in *HandleAnalyticsRequest, opts ...grpc.CallOption) (*v1beta11.ReportResult, error) {
	out := new(v1beta11.ReportResult)
	err := c.cc.Invoke(ctx, "/analytics.HandleAnalyticsService/HandleAnalytics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HandleAnalyticsServiceServer is the server API for HandleAnalyticsService service.
type HandleAnalyticsServiceServer interface {
	// HandleAnalytics is called by Mixer at request-time to deliver 'analytics' instances to the backend.
	HandleAnalytics(context.Context, *HandleAnalyticsRequest) (*v1beta11.ReportResult, error)
}

func RegisterHandleAnalyticsServiceServer(s *grpc.Server, srv HandleAnalyticsServiceServer) {
	s.RegisterService(&_HandleAnalyticsService_serviceDesc, srv)
}

func _HandleAnalyticsService_HandleAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandleAnalyticsServiceServer).HandleAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/analytics.HandleAnalyticsService/HandleAnalytics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandleAnalyticsServiceServer).HandleAnalytics(ctx, req.(*HandleAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HandleAnalyticsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "analytics.HandleAnalyticsService",
	HandlerType: (*HandleAnalyticsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleAnalytics",
			Handler:    _HandleAnalyticsService_HandleAnalytics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mixer/analytics/template_handler_service.proto",
}

func (m *HandleAnalyticsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandleAnalyticsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Instances) > 0 {
		for _, msg := range m.Instances {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTemplateHandlerService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.AdapterConfig != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTemplateHandlerService(dAtA, i, uint64(m.AdapterConfig.Size()))
		n1, err := m.AdapterConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.DedupId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTemplateHandlerService(dAtA, i, uint64(len(m.DedupId)))
		i += copy(dAtA[i:], m.DedupId)
	}
	return i, nil
}

func (m *InstanceMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstanceMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ApiProxy) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTemplateHandlerService(dAtA, i, uint64(len(m.ApiProxy)))
		i += copy(dAtA[i:], m.ApiProxy)
	}
	if m.ResponseStatusCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTemplateHandlerService(dAtA, i, uint64(m.ResponseStatusCode))
	}
	if m.ClientIp != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTemplateHandlerService(dAtA, i, uint64(m.ClientIp.Size()))
		n2, err := m.ClientIp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.RequestVerb) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTemplateHandlerService(dAtA, i, uint64(len(m.RequestVerb)))
		i += copy(dAtA[i:], m.RequestVerb)
	}
	if len(m.RequestUri) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTemplateHandlerService(dAtA, i, uint64(len(m.RequestUri)))
		i += copy(dAtA[i:], m.RequestUri)
	}
	if len(m.RequestPath) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTemplateHandlerService(dAtA, i, uint64(len(m.RequestPath)))
		i += copy(dAtA[i:], m.RequestPath)
	}
	if len(m.Useragent) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTemplateHandlerService(dAtA, i, uint64(len(m.Useragent)))
		i += copy(dAtA[i:], m.Useragent)
	}
	if m.ClientReceivedStartTimestamp != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTemplateHandlerService(dAtA, i, uint64(m.ClientReceivedStartTimestamp.Size()))
		n3, err := m.ClientReceivedStartTimestamp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.ClientReceivedEndTimestamp != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTemplateHandlerService(dAtA, i, uint64(m.ClientReceivedEndTimestamp.Size()))
		n4, err := m.ClientReceivedEndTimestamp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.ClientSentStartTimestamp != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTemplateHandlerService(dAtA, i, uint64(m.ClientSentStartTimestamp.Size()))
		n5, err := m.ClientSentStartTimestamp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.ClientSentEndTimestamp != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTemplateHandlerService(dAtA, i, uint64(m.ClientSentEndTimestamp.Size()))
		n6, err := m.ClientSentEndTimestamp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.TargetSentStartTimestamp != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTemplateHandlerService(dAtA, i, uint64(m.TargetSentStartTimestamp.Size()))
		n7, err := m.TargetSentStartTimestamp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.TargetSentEndTimestamp != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTemplateHandlerService(dAtA, i, uint64(m.TargetSentEndTimestamp.Size()))
		n8, err := m.TargetSentEndTimestamp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.TargetReceivedStartTimestamp != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTemplateHandlerService(dAtA, i, uint64(m.TargetReceivedStartTimestamp.Size()))
		n9, err := m.TargetReceivedStartTimestamp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.TargetReceivedEndTimestamp != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintTemplateHandlerService(dAtA, i, uint64(m.TargetReceivedEndTimestamp.Size()))
		n10, err := m.TargetReceivedEndTimestamp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if len(m.ApiClaims) > 0 {
		keysForApiClaims := make([]string, 0, len(m.ApiClaims))
		for k, _ := range m.ApiClaims {
			keysForApiClaims = append(keysForApiClaims, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForApiClaims)
		for _, k := range keysForApiClaims {
			dAtA[i] = 0xc2
			i++
			dAtA[i] = 0xc
			i++
			v := m.ApiClaims[string(k)]
			mapSize := 1 + len(k) + sovTemplateHandlerService(uint64(len(k))) + 1 + len(v) + sovTemplateHandlerService(uint64(len(v)))
			i = encodeVarintTemplateHandlerService(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTemplateHandlerService(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintTemplateHandlerService(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.ApiKey) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0xc
		i++
		i = encodeVarintTemplateHandlerService(dAtA, i, uint64(len(m.ApiKey)))
		i += copy(dAtA[i:], m.ApiKey)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0xe4
		i++
		dAtA[i] = 0x93
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTemplateHandlerService(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *Type) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Type) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *InstanceParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstanceParam) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ApiProxy) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTemplateHandlerService(dAtA, i, uint64(len(m.ApiProxy)))
		i += copy(dAtA[i:], m.ApiProxy)
	}
	if len(m.ResponseStatusCode) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTemplateHandlerService(dAtA, i, uint64(len(m.ResponseStatusCode)))
		i += copy(dAtA[i:], m.ResponseStatusCode)
	}
	if len(m.ClientIp) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTemplateHandlerService(dAtA, i, uint64(len(m.ClientIp)))
		i += copy(dAtA[i:], m.ClientIp)
	}
	if len(m.RequestVerb) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTemplateHandlerService(dAtA, i, uint64(len(m.RequestVerb)))
		i += copy(dAtA[i:], m.RequestVerb)
	}
	if len(m.RequestUri) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTemplateHandlerService(dAtA, i, uint64(len(m.RequestUri)))
		i += copy(dAtA[i:], m.RequestUri)
	}
	if len(m.RequestPath) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTemplateHandlerService(dAtA, i, uint64(len(m.RequestPath)))
		i += copy(dAtA[i:], m.RequestPath)
	}
	if len(m.Useragent) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTemplateHandlerService(dAtA, i, uint64(len(m.Useragent)))
		i += copy(dAtA[i:], m.Useragent)
	}
	if len(m.ClientReceivedStartTimestamp) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTemplateHandlerService(dAtA, i, uint64(len(m.ClientReceivedStartTimestamp)))
		i += copy(dAtA[i:], m.ClientReceivedStartTimestamp)
	}
	if len(m.ClientReceivedEndTimestamp) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTemplateHandlerService(dAtA, i, uint64(len(m.ClientReceivedEndTimestamp)))
		i += copy(dAtA[i:], m.ClientReceivedEndTimestamp)
	}
	if len(m.ClientSentStartTimestamp) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTemplateHandlerService(dAtA, i, uint64(len(m.ClientSentStartTimestamp)))
		i += copy(dAtA[i:], m.ClientSentStartTimestamp)
	}
	if len(m.ClientSentEndTimestamp) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTemplateHandlerService(dAtA, i, uint64(len(m.ClientSentEndTimestamp)))
		i += copy(dAtA[i:], m.ClientSentEndTimestamp)
	}
	if len(m.TargetSentStartTimestamp) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTemplateHandlerService(dAtA, i, uint64(len(m.TargetSentStartTimestamp)))
		i += copy(dAtA[i:], m.TargetSentStartTimestamp)
	}
	if len(m.TargetSentEndTimestamp) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTemplateHandlerService(dAtA, i, uint64(len(m.TargetSentEndTimestamp)))
		i += copy(dAtA[i:], m.TargetSentEndTimestamp)
	}
	if len(m.TargetReceivedStartTimestamp) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTemplateHandlerService(dAtA, i, uint64(len(m.TargetReceivedStartTimestamp)))
		i += copy(dAtA[i:], m.TargetReceivedStartTimestamp)
	}
	if len(m.TargetReceivedEndTimestamp) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintTemplateHandlerService(dAtA, i, uint64(len(m.TargetReceivedEndTimestamp)))
		i += copy(dAtA[i:], m.TargetReceivedEndTimestamp)
	}
	if len(m.ApiClaims) > 0 {
		keysForApiClaims := make([]string, 0, len(m.ApiClaims))
		for k, _ := range m.ApiClaims {
			keysForApiClaims = append(keysForApiClaims, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForApiClaims)
		for _, k := range keysForApiClaims {
			dAtA[i] = 0xc2
			i++
			dAtA[i] = 0xc
			i++
			v := m.ApiClaims[string(k)]
			mapSize := 1 + len(k) + sovTemplateHandlerService(uint64(len(k))) + 1 + len(v) + sovTemplateHandlerService(uint64(len(v)))
			i = encodeVarintTemplateHandlerService(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTemplateHandlerService(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintTemplateHandlerService(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.ApiKey) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0xc
		i++
		i = encodeVarintTemplateHandlerService(dAtA, i, uint64(len(m.ApiKey)))
		i += copy(dAtA[i:], m.ApiKey)
	}
	return i, nil
}

func encodeVarintTemplateHandlerService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *HandleAnalyticsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Instances) > 0 {
		for _, e := range m.Instances {
			l = e.Size()
			n += 1 + l + sovTemplateHandlerService(uint64(l))
		}
	}
	if m.AdapterConfig != nil {
		l = m.AdapterConfig.Size()
		n += 1 + l + sovTemplateHandlerService(uint64(l))
	}
	l = len(m.DedupId)
	if l > 0 {
		n += 1 + l + sovTemplateHandlerService(uint64(l))
	}
	return n
}

func (m *InstanceMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ApiProxy)
	if l > 0 {
		n += 1 + l + sovTemplateHandlerService(uint64(l))
	}
	if m.ResponseStatusCode != 0 {
		n += 1 + sovTemplateHandlerService(uint64(m.ResponseStatusCode))
	}
	if m.ClientIp != nil {
		l = m.ClientIp.Size()
		n += 1 + l + sovTemplateHandlerService(uint64(l))
	}
	l = len(m.RequestVerb)
	if l > 0 {
		n += 1 + l + sovTemplateHandlerService(uint64(l))
	}
	l = len(m.RequestUri)
	if l > 0 {
		n += 1 + l + sovTemplateHandlerService(uint64(l))
	}
	l = len(m.RequestPath)
	if l > 0 {
		n += 1 + l + sovTemplateHandlerService(uint64(l))
	}
	l = len(m.Useragent)
	if l > 0 {
		n += 1 + l + sovTemplateHandlerService(uint64(l))
	}
	if m.ClientReceivedStartTimestamp != nil {
		l = m.ClientReceivedStartTimestamp.Size()
		n += 1 + l + sovTemplateHandlerService(uint64(l))
	}
	if m.ClientReceivedEndTimestamp != nil {
		l = m.ClientReceivedEndTimestamp.Size()
		n += 1 + l + sovTemplateHandlerService(uint64(l))
	}
	if m.ClientSentStartTimestamp != nil {
		l = m.ClientSentStartTimestamp.Size()
		n += 1 + l + sovTemplateHandlerService(uint64(l))
	}
	if m.ClientSentEndTimestamp != nil {
		l = m.ClientSentEndTimestamp.Size()
		n += 1 + l + sovTemplateHandlerService(uint64(l))
	}
	if m.TargetSentStartTimestamp != nil {
		l = m.TargetSentStartTimestamp.Size()
		n += 1 + l + sovTemplateHandlerService(uint64(l))
	}
	if m.TargetSentEndTimestamp != nil {
		l = m.TargetSentEndTimestamp.Size()
		n += 1 + l + sovTemplateHandlerService(uint64(l))
	}
	if m.TargetReceivedStartTimestamp != nil {
		l = m.TargetReceivedStartTimestamp.Size()
		n += 1 + l + sovTemplateHandlerService(uint64(l))
	}
	if m.TargetReceivedEndTimestamp != nil {
		l = m.TargetReceivedEndTimestamp.Size()
		n += 1 + l + sovTemplateHandlerService(uint64(l))
	}
	if len(m.ApiClaims) > 0 {
		for k, v := range m.ApiClaims {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTemplateHandlerService(uint64(len(k))) + 1 + len(v) + sovTemplateHandlerService(uint64(len(v)))
			n += mapEntrySize + 2 + sovTemplateHandlerService(uint64(mapEntrySize))
		}
	}
	l = len(m.ApiKey)
	if l > 0 {
		n += 2 + l + sovTemplateHandlerService(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 5 + l + sovTemplateHandlerService(uint64(l))
	}
	return n
}

func (m *Type) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *InstanceParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ApiProxy)
	if l > 0 {
		n += 1 + l + sovTemplateHandlerService(uint64(l))
	}
	l = len(m.ResponseStatusCode)
	if l > 0 {
		n += 1 + l + sovTemplateHandlerService(uint64(l))
	}
	l = len(m.ClientIp)
	if l > 0 {
		n += 1 + l + sovTemplateHandlerService(uint64(l))
	}
	l = len(m.RequestVerb)
	if l > 0 {
		n += 1 + l + sovTemplateHandlerService(uint64(l))
	}
	l = len(m.RequestUri)
	if l > 0 {
		n += 1 + l + sovTemplateHandlerService(uint64(l))
	}
	l = len(m.RequestPath)
	if l > 0 {
		n += 1 + l + sovTemplateHandlerService(uint64(l))
	}
	l = len(m.Useragent)
	if l > 0 {
		n += 1 + l + sovTemplateHandlerService(uint64(l))
	}
	l = len(m.ClientReceivedStartTimestamp)
	if l > 0 {
		n += 1 + l + sovTemplateHandlerService(uint64(l))
	}
	l = len(m.ClientReceivedEndTimestamp)
	if l > 0 {
		n += 1 + l + sovTemplateHandlerService(uint64(l))
	}
	l = len(m.ClientSentStartTimestamp)
	if l > 0 {
		n += 1 + l + sovTemplateHandlerService(uint64(l))
	}
	l = len(m.ClientSentEndTimestamp)
	if l > 0 {
		n += 1 + l + sovTemplateHandlerService(uint64(l))
	}
	l = len(m.TargetSentStartTimestamp)
	if l > 0 {
		n += 1 + l + sovTemplateHandlerService(uint64(l))
	}
	l = len(m.TargetSentEndTimestamp)
	if l > 0 {
		n += 1 + l + sovTemplateHandlerService(uint64(l))
	}
	l = len(m.TargetReceivedStartTimestamp)
	if l > 0 {
		n += 1 + l + sovTemplateHandlerService(uint64(l))
	}
	l = len(m.TargetReceivedEndTimestamp)
	if l > 0 {
		n += 1 + l + sovTemplateHandlerService(uint64(l))
	}
	if len(m.ApiClaims) > 0 {
		for k, v := range m.ApiClaims {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTemplateHandlerService(uint64(len(k))) + 1 + len(v) + sovTemplateHandlerService(uint64(len(v)))
			n += mapEntrySize + 2 + sovTemplateHandlerService(uint64(mapEntrySize))
		}
	}
	l = len(m.ApiKey)
	if l > 0 {
		n += 2 + l + sovTemplateHandlerService(uint64(l))
	}
	return n
}

func sovTemplateHandlerService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTemplateHandlerService(x uint64) (n int) {
	return sovTemplateHandlerService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *HandleAnalyticsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HandleAnalyticsRequest{`,
		`Instances:` + strings.Replace(fmt.Sprintf("%v", this.Instances), "InstanceMsg", "InstanceMsg", 1) + `,`,
		`AdapterConfig:` + strings.Replace(fmt.Sprintf("%v", this.AdapterConfig), "Any", "types.Any", 1) + `,`,
		`DedupId:` + fmt.Sprintf("%v", this.DedupId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InstanceMsg) String() string {
	if this == nil {
		return "nil"
	}
	keysForApiClaims := make([]string, 0, len(this.ApiClaims))
	for k, _ := range this.ApiClaims {
		keysForApiClaims = append(keysForApiClaims, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForApiClaims)
	mapStringForApiClaims := "map[string]string{"
	for _, k := range keysForApiClaims {
		mapStringForApiClaims += fmt.Sprintf("%v: %v,", k, this.ApiClaims[k])
	}
	mapStringForApiClaims += "}"
	s := strings.Join([]string{`&InstanceMsg{`,
		`ApiProxy:` + fmt.Sprintf("%v", this.ApiProxy) + `,`,
		`ResponseStatusCode:` + fmt.Sprintf("%v", this.ResponseStatusCode) + `,`,
		`ClientIp:` + strings.Replace(fmt.Sprintf("%v", this.ClientIp), "IPAddress", "v1beta1.IPAddress", 1) + `,`,
		`RequestVerb:` + fmt.Sprintf("%v", this.RequestVerb) + `,`,
		`RequestUri:` + fmt.Sprintf("%v", this.RequestUri) + `,`,
		`RequestPath:` + fmt.Sprintf("%v", this.RequestPath) + `,`,
		`Useragent:` + fmt.Sprintf("%v", this.Useragent) + `,`,
		`ClientReceivedStartTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.ClientReceivedStartTimestamp), "TimeStamp", "v1beta1.TimeStamp", 1) + `,`,
		`ClientReceivedEndTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.ClientReceivedEndTimestamp), "TimeStamp", "v1beta1.TimeStamp", 1) + `,`,
		`ClientSentStartTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.ClientSentStartTimestamp), "TimeStamp", "v1beta1.TimeStamp", 1) + `,`,
		`ClientSentEndTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.ClientSentEndTimestamp), "TimeStamp", "v1beta1.TimeStamp", 1) + `,`,
		`TargetSentStartTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.TargetSentStartTimestamp), "TimeStamp", "v1beta1.TimeStamp", 1) + `,`,
		`TargetSentEndTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.TargetSentEndTimestamp), "TimeStamp", "v1beta1.TimeStamp", 1) + `,`,
		`TargetReceivedStartTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.TargetReceivedStartTimestamp), "TimeStamp", "v1beta1.TimeStamp", 1) + `,`,
		`TargetReceivedEndTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.TargetReceivedEndTimestamp), "TimeStamp", "v1beta1.TimeStamp", 1) + `,`,
		`ApiClaims:` + mapStringForApiClaims + `,`,
		`ApiKey:` + fmt.Sprintf("%v", this.ApiKey) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Type) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Type{`,
		`}`,
	}, "")
	return s
}
func (this *InstanceParam) String() string {
	if this == nil {
		return "nil"
	}
	keysForApiClaims := make([]string, 0, len(this.ApiClaims))
	for k, _ := range this.ApiClaims {
		keysForApiClaims = append(keysForApiClaims, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForApiClaims)
	mapStringForApiClaims := "map[string]string{"
	for _, k := range keysForApiClaims {
		mapStringForApiClaims += fmt.Sprintf("%v: %v,", k, this.ApiClaims[k])
	}
	mapStringForApiClaims += "}"
	s := strings.Join([]string{`&InstanceParam{`,
		`ApiProxy:` + fmt.Sprintf("%v", this.ApiProxy) + `,`,
		`ResponseStatusCode:` + fmt.Sprintf("%v", this.ResponseStatusCode) + `,`,
		`ClientIp:` + fmt.Sprintf("%v", this.ClientIp) + `,`,
		`RequestVerb:` + fmt.Sprintf("%v", this.RequestVerb) + `,`,
		`RequestUri:` + fmt.Sprintf("%v", this.RequestUri) + `,`,
		`RequestPath:` + fmt.Sprintf("%v", this.RequestPath) + `,`,
		`Useragent:` + fmt.Sprintf("%v", this.Useragent) + `,`,
		`ClientReceivedStartTimestamp:` + fmt.Sprintf("%v", this.ClientReceivedStartTimestamp) + `,`,
		`ClientReceivedEndTimestamp:` + fmt.Sprintf("%v", this.ClientReceivedEndTimestamp) + `,`,
		`ClientSentStartTimestamp:` + fmt.Sprintf("%v", this.ClientSentStartTimestamp) + `,`,
		`ClientSentEndTimestamp:` + fmt.Sprintf("%v", this.ClientSentEndTimestamp) + `,`,
		`TargetSentStartTimestamp:` + fmt.Sprintf("%v", this.TargetSentStartTimestamp) + `,`,
		`TargetSentEndTimestamp:` + fmt.Sprintf("%v", this.TargetSentEndTimestamp) + `,`,
		`TargetReceivedStartTimestamp:` + fmt.Sprintf("%v", this.TargetReceivedStartTimestamp) + `,`,
		`TargetReceivedEndTimestamp:` + fmt.Sprintf("%v", this.TargetReceivedEndTimestamp) + `,`,
		`ApiClaims:` + mapStringForApiClaims + `,`,
		`ApiKey:` + fmt.Sprintf("%v", this.ApiKey) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTemplateHandlerService(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *HandleAnalyticsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTemplateHandlerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandleAnalyticsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandleAnalyticsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTemplateHandlerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instances = append(m.Instances, &InstanceMsg{})
			if err := m.Instances[len(m.Instances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdapterConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTemplateHandlerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdapterConfig == nil {
				m.AdapterConfig = &types.Any{}
			}
			if err := m.AdapterConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DedupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTemplateHandlerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DedupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTemplateHandlerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstanceMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTemplateHandlerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstanceMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstanceMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiProxy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTemplateHandlerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiProxy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseStatusCode", wireType)
			}
			m.ResponseStatusCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTemplateHandlerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResponseStatusCode |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTemplateHandlerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClientIp == nil {
				m.ClientIp = &v1beta1.IPAddress{}
			}
			if err := m.ClientIp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestVerb", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTemplateHandlerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestVerb = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTemplateHandlerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTemplateHandlerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Useragent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTemplateHandlerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Useragent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientReceivedStartTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTemplateHandlerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClientReceivedStartTimestamp == nil {
				m.ClientReceivedStartTimestamp = &v1beta1.TimeStamp{}
			}
			if err := m.ClientReceivedStartTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientReceivedEndTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTemplateHandlerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClientReceivedEndTimestamp == nil {
				m.ClientReceivedEndTimestamp = &v1beta1.TimeStamp{}
			}
			if err := m.ClientReceivedEndTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSentStartTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTemplateHandlerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClientSentStartTimestamp == nil {
				m.ClientSentStartTimestamp = &v1beta1.TimeStamp{}
			}
			if err := m.ClientSentStartTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSentEndTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTemplateHandlerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClientSentEndTimestamp == nil {
				m.ClientSentEndTimestamp = &v1beta1.TimeStamp{}
			}
			if err := m.ClientSentEndTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetSentStartTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTemplateHandlerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TargetSentStartTimestamp == nil {
				m.TargetSentStartTimestamp = &v1beta1.TimeStamp{}
			}
			if err := m.TargetSentStartTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetSentEndTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTemplateHandlerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TargetSentEndTimestamp == nil {
				m.TargetSentEndTimestamp = &v1beta1.TimeStamp{}
			}
			if err := m.TargetSentEndTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetReceivedStartTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTemplateHandlerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TargetReceivedStartTimestamp == nil {
				m.TargetReceivedStartTimestamp = &v1beta1.TimeStamp{}
			}
			if err := m.TargetReceivedStartTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetReceivedEndTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTemplateHandlerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TargetReceivedEndTimestamp == nil {
				m.TargetReceivedEndTimestamp = &v1beta1.TimeStamp{}
			}
			if err := m.TargetReceivedEndTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiClaims", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTemplateHandlerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiClaims == nil {
				m.ApiClaims = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTemplateHandlerService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTemplateHandlerService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTemplateHandlerService
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTemplateHandlerService
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTemplateHandlerService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTemplateHandlerService
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTemplateHandlerService
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTemplateHandlerService(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTemplateHandlerService
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ApiClaims[mapkey] = mapvalue
			iNdEx = postIndex
		case 201:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTemplateHandlerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 72295727:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTemplateHandlerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTemplateHandlerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Type) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTemplateHandlerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTemplateHandlerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstanceParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTemplateHandlerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstanceParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstanceParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiProxy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTemplateHandlerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiProxy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseStatusCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTemplateHandlerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseStatusCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTemplateHandlerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestVerb", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTemplateHandlerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestVerb = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTemplateHandlerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTemplateHandlerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Useragent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTemplateHandlerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Useragent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientReceivedStartTimestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTemplateHandlerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientReceivedStartTimestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientReceivedEndTimestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTemplateHandlerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientReceivedEndTimestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSentStartTimestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTemplateHandlerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientSentStartTimestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSentEndTimestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTemplateHandlerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientSentEndTimestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetSentStartTimestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTemplateHandlerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetSentStartTimestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetSentEndTimestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTemplateHandlerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetSentEndTimestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetReceivedStartTimestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTemplateHandlerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetReceivedStartTimestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetReceivedEndTimestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTemplateHandlerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetReceivedEndTimestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiClaims", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTemplateHandlerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiClaims == nil {
				m.ApiClaims = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTemplateHandlerService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTemplateHandlerService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTemplateHandlerService
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTemplateHandlerService
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTemplateHandlerService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTemplateHandlerService
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTemplateHandlerService
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTemplateHandlerService(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTemplateHandlerService
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ApiClaims[mapkey] = mapvalue
			iNdEx = postIndex
		case 201:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTemplateHandlerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTemplateHandlerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTemplateHandlerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTemplateHandlerService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTemplateHandlerService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTemplateHandlerService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTemplateHandlerService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTemplateHandlerService
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthTemplateHandlerService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTemplateHandlerService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTemplateHandlerService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthTemplateHandlerService
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTemplateHandlerService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTemplateHandlerService   = fmt.Errorf("proto: integer overflow")
)
